
lua_package_path "/usr/local/lib/lua/lua-resty-kafka/lib/?.lua;;";
error_log /dev/stdout;
server {
  listen 8081;

        location /test {
            content_by_lua_block {
                local cjson = require "cjson"
                local client = require "resty.kafka.client"
                local producer = require "resty.kafka.producer"
                local ssl = require("ngx.ssl")

                local broker_list = {
                    { host = "broker", port = 19093 },
                }
                local sasl_config = { mechanism="PLAIN", user="admin", password="admin-secret" }

                local key = "key"
                local message = "hallo world"

                local f = assert(io.open("/certs/certchain.crt"))
                local cert_data = f:read("*a")
                f:close()

                local CERT, err = ssl.parse_pem_cert(cert_data)
                if not CERT then
                   ngx_log(ERR, "error parsing cert: ", err)
                   return nil, err
                end

                ngx.say("parsed certificate chain -> " .. tostring(CERT))

                local f = assert(io.open("/certs/privkey.key"))
                local key_data = f:read("*a")
                f:close()

                local CERT_KEY, err = ssl.parse_pem_priv_key(key_data)
                if not CERT_KEY then
                    ngx_log(ERR, "unable to parse cert key file: ", err)
                    return nil, err
                end
                ngx.say("parsed private key -> " .. tostring(CERT_KEY))

                client_config = {
                    -- ssl = true, -- DISABLE TEMPORARILY FOR TESTING SASL_PLAIN
                    ssl = false,
                    -- client_cert = CERT,
                    -- client_priv_key = CERT_KEY,
                    auth_config = sasl_config
                }

                -- usually we do not use this library directly
                local cli = client:new(broker_list, client_config)
                local brokers, partitions = cli:fetch_metadata("test")
                if not brokers then
                    ngx.say("fetch_metadata failed, err:", partitions)
                end
                ngx.say("apikeys: ", cjson.encode(cli.supported_api_versions))
                ngx.say("brokers: ", cjson.encode(brokers), "; partitions: ", cjson.encode(partitions))

                -- sync producer_type
                ngx.say("Creating producer")
                
                -- Pass the socket_config from a client to the producer
                local p, err = producer:new(broker_list, client_config)
                if not p then
                    ngx.say("Error creating producer -> " .. err)
                    return
                end

                local offset, err = p:send("test", key, message)
                if not offset then
                    ngx.say("send err:", err)
                    return
                end
                ngx.say("send success, offset: ", tonumber(offset))

                -- -- this is async producer_type and bp will be reused in the whole nginx worker
                -- local bp = producer:new(broker_list, { producer_type = "async"})

                -- local ok, err = bp:send("test", key, message)
                -- if not ok then
                --     ngx.say("send err:", err)
                --     return
                -- end

                -- ngx.say("send success, ok:", ok)
            }
        }
}