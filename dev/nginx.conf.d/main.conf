
lua_package_path "/usr/local/lib/lua/lua-resty-kafka/lib/?.lua;;";
server {
  listen 8081;
        location /test {
            content_by_lua_block {
                local cjson = require "cjson"
                local client = require "resty.kafka.client"
                local producer = require "resty.kafka.producer"

                local broker_list = {
                    { host = "broker", port = 9093 },
                }

                local key = "key"
                local message = "hallo world"

                -- usually we do not use this library directly
                local cli = client:new(broker_list, {ssl = true})
                local brokers, partitions = cli:fetch_metadata("test")
                if not brokers then
                    ngx.say("fetch_metadata failed, err:", partitions)
                end
                ngx.say("apikeys: ", cjson.encode(cli.supported_api_versions))
                ngx.say("brokers: ", cjson.encode(brokers), "; partitions: ", cjson.encode(partitions))


                -- sync producer_type
                ngx.say("Creating producer")
                local p, err = producer:new(broker_list)
                if not p then
                    ngx.say("Error creating producer -> " .. err)
                    return
                end

                local offset, err = p:send("test", key, message)
                if not offset then
                    ngx.say("send err:", err)
                    return
                end
                ngx.say("send success, offset: ", tonumber(offset))

                -- this is async producer_type and bp will be reused in the whole nginx worker
                local bp = producer:new(broker_list, { producer_type = "async"})

                local ok, err = bp:send("test", key, message)
                if not ok then
                    ngx.say("send err:", err)
                    return
                end

                ngx.say("send success, ok:", ok)
            }
        }
}